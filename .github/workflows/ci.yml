# .github/workflows/ci.yml

name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '20.x'
  POSTGRESQL_VERSION: '15'
  DATABASE_URL: postgresql://postgres:postgres@localhost:5432/dpop_test

jobs:
  lint-test:
    name: 🧪 Lint and Test
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: dpop_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: ⬇️ Checkout repository
        uses: actions/checkout@v3

      - name: 🟢 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🎯 Run linting
        run: npm run lint

      - name: 🔄 Generate Prisma Client
        run: npx prisma generate

      - name: 🗃️ Run Prisma Migrate
        run: npx prisma migrate deploy

      - name: 🧪 Run tests
        run: npm run test:ci

  build:
    name: 🏗️ Build
    needs: lint-test
    runs-on: ubuntu-latest
    
    steps:
      - name: ⬇️ Checkout repository
        uses: actions/checkout@v3

      - name: 🟢 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔄 Generate Prisma Client
        run: npx prisma generate

      - name: 🏗️ Build application
        run: npm run build

      - name: 📤 Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-output
          path: .next
          retention-days: 7

  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: ⬇️ Checkout repository
        uses: actions/checkout@v3

      - name: 🔍 Run security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

      - name: 🔍 Run CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          languages: javascript, typescript

  deploy-staging:
    name: 🚀 Deploy to Staging
    needs: [build, security-scan]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
      - name: ⬇️ Checkout repository
        uses: actions/checkout@v3

      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-output
          path: .next

      # Add your staging deployment steps here
      - name: 🚀 Deploy to staging
        run: echo "Add your staging deployment commands here"

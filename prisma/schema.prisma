// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Core Fluid Movement Models

enum LifeStage {
  FLOWER      // Visitor from different ideology/background
  EGG         // New member
  LARVAE      // Learning stage
  PUPA        // Reflection/passive stage
  BUTTERFLY   // Active member
}

enum ButterflyRole {
  FRIEND      // Regular participant
  CONTRIBUTOR // Active content/resource creator
  GUIDE       // Helps and mentors others
  STEWARD     // Maintains meadow spaces
}

model Meadow {
  id           String             @id @default(cuid())
  name         String             @unique // Add unique constraint
  description  String?
  status       MeadowStatus
  type         MeadowType
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  participants MeadowParticipant[]
  resources    MeadowResource[]

  @@map("meadows")
}

model MeadowParticipant {
  id            String           @id @default(cuid())
  meadowId      String
  nickname      String?          // Optional - for anonymous participants
  lifeStage     LifeStage       @default(FLOWER)
  butterflyRole ButterflyRole?  // Only for BUTTERFLY stage
  joinedAt      DateTime        @default(now())
  lastActive    DateTime        @default(now())
  
  // Stage progression tracking
  stageHistory  StageTransition[]
  
  // Relations
  meadow        Meadow          @relation(fields: [meadowId], references: [id])
  
  // User relation
  userId        String?         @unique
  user          User?           @relation(fields: [userId], references: [id])

  @@map("meadow_participants")
}

model StageTransition {
  id          String    @id @default(cuid())
  userId      String
  fromStage   LifeStage
  toStage     LifeStage
  reason      String?
  createdAt   DateTime  @default(now())
  
  // Relations
  user        User      @relation(fields: [userId], references: [id])

  @@map("stage_transitions")
}

model MeadowResource {
  id          String      @id @default(cuid())
  meadowId    String
  type        ResourceType
  title       String
  content     Json
  minStage    LifeStage  @default(FLOWER)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  meadow      Meadow      @relation(fields: [meadowId], references: [id])

  // Add unique constraint for title within a meadow
  @@unique([meadowId, title])
  @@map("meadow_resources")
}

// Enums for Fluid Movement
enum MeadowStatus {
  PLANNED
  ACTIVE
  PAUSED
  COMPLETED
  ARCHIVED
}

enum MeadowType {
  GATHERING    // Regular open gathering
  WORKSHOP     // Learning focused
  ACTION       // Specific action or campaign
  CELEBRATION  // Community celebration
}

enum ParticipantRole {
  VISITOR      // Anonymous/first-time participant
  FRIEND       // Regular participant
  CONTRIBUTOR  // Active contributor
  GUIDE        // Experienced member who helps others
}

enum StewardRole {
  HOST         // Manages meadow gatherings
  MENTOR       // Guides new participants
  GUARDIAN     // Ensures safety and positive atmosphere
}

enum DiscussionStatus {
  ACTIVE
  RESOLVED
  ARCHIVED
}

enum ResourceType {
  GUIDE        // How-to guides
  STORY        // Movement stories and experiences
  TOOL         // Tools and templates
  MEDIA        // Images, videos, etc.
}

enum AccessLevel {
  PUBLIC       // Available to all
  FRIEND       // Available to registered friends
  CONTRIBUTOR  // Available to active contributors
  STEWARD      // Available to stewards only
}

enum AchievementType {
  STAGE
  CONTRIBUTION
  PARTICIPATION
  MILESTONE
}

model Achievement {
  id          String          @id @default(cuid())
  title       String
  description String
  type        AchievementType
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  
  // Requirements for earning
  requirements Json
  
  // Track who earned it
  userAchievements UserAchievement[]

  @@map("achievements")
}

model UserAchievement {
  id            String     @id @default(cuid())
  userId        String
  achievementId String
  earnedAt      DateTime   @default(now())
  progress      Int        @default(0)  // 0-100%
  
  // Relations
  user        User        @relation(fields: [userId], references: [id])
  achievement Achievement @relation(fields: [achievementId], references: [id])

  @@unique([userId, achievementId])
  @@map("user_achievements")
}

// Auth Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  passwordHash  String?
  accounts      Account[]
  sessions      Session[]
  participant   MeadowParticipant?
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  achievements    UserAchievement[]
  stageHistory   StageTransition[]
  currentStage   LifeStage        @default(EGG)
  stageUpdatedAt DateTime         @default(now())

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Core models for MVP

model Member {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String
  passwordHash  String
  role          Role      @default(MEMBER)
  status        Status    @default(ACTIVE)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  lastLoginAt   DateTime?
  
  // Relations
  messages      Message[]     @relation("SentMessages")
  documents     Document[]    @relation("OwnedDocuments")
  votes         Vote[]
  eventRsvps    EventRSVP[]

  @@map("members")
}

model Message {
  id          String    @id @default(cuid())
  senderId    String
  content     String
  type        MessageType
  priority    Priority   @default(NORMAL)
  status      MessageStatus @default(SENT)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  sender      Member    @relation("SentMessages", fields: [senderId], references: [id])
  
  @@map("messages")
}

model Document {
  id          String    @id @default(cuid())
  title       String
  content     String
  ownerId     String
  version     Int       @default(1)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  owner       Member    @relation("OwnedDocuments", fields: [ownerId], references: [id])

  @@map("documents")
}

model Proposal {
  id          String    @id @default(cuid())
  title       String
  description String
  status      ProposalStatus @default(DRAFT)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  closedAt    DateTime?

  // Relations
  votes       Vote[]

  @@map("proposals")
}

model Vote {
  id          String    @id @default(cuid())
  memberId    String
  proposalId  String
  choice      VoteChoice
  createdAt   DateTime  @default(now())

  // Relations
  member      Member    @relation(fields: [memberId], references: [id])
  proposal    Proposal  @relation(fields: [proposalId], references: [id])

  @@unique([memberId, proposalId])
  @@map("votes")
}

model Event {
  id          String    @id @default(cuid())
  title       String
  description String
  startTime   DateTime
  endTime     DateTime
  location    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  rsvps       EventRSVP[]

  @@map("events")
}

model EventRSVP {
  id          String    @id @default(cuid())
  memberId    String
  eventId     String
  status      RSVPStatus
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  member      Member    @relation(fields: [memberId], references: [id])
  event       Event     @relation(fields: [eventId], references: [id])

  @@unique([memberId, eventId])
  @@map("event_rsvps")
}

// Enums

enum Role {
  ADMIN
  MEMBER
  GUEST
}

enum Status {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum MessageType {
  DIRECT
  ANNOUNCEMENT
  SYSTEM
}

enum Priority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum MessageStatus {
  SENT
  DELIVERED
  READ
}

enum ProposalStatus {
  DRAFT
  VOTING
  CLOSED
}

enum VoteChoice {
  YES
  NO
  ABSTAIN
}

enum RSVPStatus {
  YES
  NO
  MAYBE
}

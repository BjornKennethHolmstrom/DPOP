// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum LifeStage {
  FLOWER      // Visitor from different ideology/background
  EGG         // New member
  LARVAE      // Learning stage
  PUPA        // Reflection/passive stage
  BUTTERFLY   // Active member
}

enum ButterflyRole {
  FRIEND      // Regular participant
  CONTRIBUTOR // Active content/resource creator
  GUIDE       // Helps and mentors others
  STEWARD     // Maintains meadow spaces
}

enum MeadowStatus {
  PLANNED
  ACTIVE
  PAUSED
  COMPLETED
  ARCHIVED
}

enum MeadowType {
  GATHERING    // Regular open gathering
  WORKSHOP     // Learning focused
  ACTION       // Specific action or campaign
  CELEBRATION  // Community celebration
}

enum ResourceType {
  GUIDE       // How-to guides
  STORY       // Movement stories and experiences
  TOOL        // Tools and templates
  TEMPLATE    // Reusable templates
  DOCUMENT    // General documents
  MEDIA       // Images, videos, etc.
  LINK        // External links
}

enum AccessLevel {
  PUBLIC      // Available to all
  MEMBER      // Available to registered members
  CONTRIBUTOR // Available to active contributors
  STEWARD     // Available to stewards only
  PRIVATE     // Available only to creator
}

enum AchievementType {
  STAGE
  CONTRIBUTION
  PARTICIPATION
  MILESTONE
}

// Core Models
model Meadow {
  id           String             @id @default(cuid())
  name         String             @unique
  description  String?
  status       MeadowStatus
  type         MeadowType
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  
  // Relations
  participants MeadowParticipant[]
  resources    Resource[]

  @@map("meadows")
}

model MeadowParticipant {
  id            String           @id @default(cuid())
  meadowId      String
  nickname      String?          // Optional - for anonymous participants
  lifeStage     LifeStage       @default(FLOWER)
  butterflyRole ButterflyRole?  // Only for BUTTERFLY stage
  joinedAt      DateTime        @default(now())
  lastActive    DateTime        @default(now())
  
  // Relations
  meadow        Meadow          @relation(fields: [meadowId], references: [id])
  stageHistory  StageTransition[]
  userId        String?         @unique
  user          User?           @relation(fields: [userId], references: [id])

  @@map("meadow_participants")
}

model StageTransition {
  id            String    @id @default(cuid())
  fromStage     LifeStage
  toStage       LifeStage
  reason        String?
  createdAt     DateTime  @default(now())
  
  // Relations
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  participantId String?
  participant   MeadowParticipant? @relation(fields: [participantId], references: [id])

  @@index([userId])
  @@index([participantId])
}

model Resource {
  id          String        @id @default(cuid())
  title       String
  description String
  type        ResourceType
  content     Json         // Flexible content storage
  categories  String[]
  stage       LifeStage?
  access      AccessLevel  @default(PUBLIC)
  metadata    Json
  views       Int          @default(0)
  shares      Int          @default(0)
  
  // Relations
  authorId    String
  author      User         @relation(fields: [authorId], references: [id])
  meadowId    String?
  meadow      Meadow?      @relation(fields: [meadowId], references: [id])
  
  // Timestamps
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@unique([meadowId, title])
  @@index([type])
  @@index([categories])
  @@index([stage])
  @@index([authorId])
  @@index([meadowId])
}

model Achievement {
  id              String            @id @default(cuid())
  title           String
  description     String
  type            AchievementType
  requirements    Json
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  
  // Relations
  userAchievements UserAchievement[]

  @@map("achievements")
}

model UserAchievement {
  id            String      @id @default(cuid())
  userId        String
  achievementId String
  earnedAt      DateTime    @default(now())
  progress      Int         @default(0)  // 0-100%
  
  // Relations
  user          User        @relation(fields: [userId], references: [id])
  achievement   Achievement @relation(fields: [achievementId], references: [id])

  @@unique([userId, achievementId])
  @@map("user_achievements")
}

// Auth Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id              String    @id @default(cuid())
  name            String?
  email           String?   @unique
  emailVerified   DateTime?
  image           String?
  passwordHash    String?
  currentStage    LifeStage @default(EGG)
  stageUpdatedAt  DateTime  @default(now())
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  accounts        Account[]
  sessions        Session[]
  participant     MeadowParticipant?
  achievements    UserAchievement[]
  stageTransitions StageTransition[]
  resources       Resource[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
